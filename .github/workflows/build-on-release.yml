name: Build Application on Release

on:
  release:
    types: [published]
  # Also trigger on release tags for testing
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build OpenDCC
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        build_type: [Release]
        
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            cmake \
            build-essential \
            pkg-config \
            libgl1-mesa-dev \
            libx11-dev \
            libxext-dev \
            libxfixes-dev \
            libxi-dev \
            libxrender-dev \
            libxcb1-dev \
            libxau-dev \
            libxdmcp-dev \
            python3-dev \
            python3-pip \
            qt5-default \
            qttools5-dev \
            qttools5-dev-tools
            
      - name: Install Python dependencies
        run: |
          python3 -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          
      - name: Configure CMake
        run: |
          cmake -B build \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_INSTALL_PREFIX=/usr/local \
            -DDCC_BUILD_TESTS=OFF
            
      - name: Build
        run: |
          cmake --build build --config ${{ matrix.build_type }} --parallel $(nproc)
          
      - name: Package artifacts
        run: |
          mkdir -p artifacts
          # Copy built executables and libraries
          find build -type f -executable -o -name "*.so" | xargs -I {} cp {} artifacts/ 2>/dev/null || true
          # Copy any config files
          if [ -d configs ]; then cp -r configs artifacts/; fi
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: opendcc-${{ matrix.build_type }}-${{ github.sha }}
          path: artifacts/
          retention-days: 30
          
  # Optional: Create release assets
  release-assets:
    name: Create Release Assets
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: opendcc-Release-${{ github.sha }}
          path: release-files/
          
      - name: Create release archive
        run: |
          cd release-files
          tar -czf ../opendcc-${{ github.event.release.tag_name }}-linux.tar.gz *
          
      - name: Upload to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: opendcc-${{ github.event.release.tag_name }}-linux.tar.gz
          asset_name: opendcc-${{ github.event.release.tag_name }}-linux.tar.gz
          asset_content_type: application/gzip