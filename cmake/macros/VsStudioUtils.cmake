option(DCC_MAKE_VSDEBUG_LAUNCHER "generate debugger environment for vs project" OFF)
option(DCC_MAKE_SHELL_ENV_FILE "generate shell environment file for all dependencies" OFF)
option(DCC_MAKE_DOT_ENV_FILE "generate dot environment file for all dependencies" OFF)

if(DCC_MAKE_VSDEBUG_LAUNCHER
   OR DCC_MAKE_SHELL_ENV_FILE
   OR DCC_MAKE_DOT_ENV_FILE)
    set(ENV_PATH CACHE INTERNAL "Debugger PATH environment variable")
    set(ENV_LD_LIBRARY_PATH CACHE INTERNAL "Debugger LD_LIBRARY_PATH environment variable")
    set(ENV_PYTHONPATH CACHE INTERNAL "Debugger PYTHONPATH environment variable")
    set(ENV_PXR_PLUGINPATH_NAME CACHE INTERNAL "Debugger ENV_PXR_PLUGINPATH_NAME environment variable")
    set(SO_ENV_NAME ENV_LD_LIBRARY_PATH)
    if(WIN32)
        set(SO_ENV_NAME ENV_PATH)
    endif()

    if(DEFINED USD_ROOT)
        list(APPEND ${SO_ENV_NAME} ${USD_ROOT}/lib/)
        list(APPEND ENV_PYTHONPATH ${USD_ROOT}/lib/python)
    else()
        message(FATAL_ERROR "USD_ROOT is not defined")
    endif()
    if(DCC_USE_PTEX)
        if(DEFINED PTEX_LOCATION)
            list(APPEND ENV_PATH ${PTEX_LOCATION}/lib)
        else()
            message(FATAL_ERROR "PTEX_LOCATION is not defined")
        endif()
    endif()
    if(DEFINED GLEW_LOCATION)
        list(APPEND ENV_PATH ${GLEW_LOCATION}/bin)
    else()
        message(FATAL_ERROR "GLEW_LOCATION is not defined")
    endif()
    if(DEFINED BOOST_ROOT)
        list(APPEND ENV_PATH ${BOOST_ROOT}/lib/)
    else()
        message(FATAL_ERROR "BOOST_ROOT is not defined")
    endif()
    if(DEFINED TBB_ROOT_DIR)
        list(APPEND ENV_PATH ${TBB_ROOT_DIR}/bin)
    else()
        message(FATAL_ERROR "TBB_ROOT_DIR is not defined")
    endif()

    if(DEFINED OIIO_LOCATION)
        list(APPEND ENV_PATH ${OIIO_LOCATION}/bin/)
        list(APPEND ENV_PYTHONPATH
             ${OIIO_LOCATION}/lib/python${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}/site-packages)
    else()
        message(FATAL_ERROR "OIIO_LOCATION is not defined")
    endif()
    if(DEFINED OCIO_LOCATION)
        list(APPEND ENV_PATH ${OCIO_LOCATION}/bin/)
        list(APPEND ENV_PYTHONPATH ${OCIO_LOCATION}/lib/site-packages)
    else()
        message(FATAL_ERROR "OCIO_LOCATION is not defined")
    endif()
    if(DEFINED _qt5Core_install_prefix)
        list(APPEND ENV_PATH ${_qt5Core_install_prefix}/bin)
    else()
        message(FATAL_ERROR "_qt5Core_install_prefix is not defined")
    endif()
    if(DEFINED OSL_ROOT)
        list(APPEND ENV_PATH ${OSL_ROOT}/bin)
    else()
        message(FATAL_ERROR "OSL_ROOT is not defined")
    endif()

    if(DEFINED ILMBASE_HOME)
        list(APPEND ENV_PATH ${ILMBASE_HOME}/bin)
    else()
        message(FATAL_ERROR "ILMBASE_HOME is not defined")
    endif()
    if(DCC_BUILD_ARNOLD_SUPPORT)
        if(DEFINED USDARNOLD_ROOT)
            list(APPEND ${SO_ENV_NAME} ${USDARNOLD_ROOT}/lib)
            list(APPEND ${SO_ENV_NAME} ${USDARNOLD_ROOT}/bin)
            list(APPEND ENV_PXR_PLUGINPATH_NAME ${USDARNOLD_ROOT}/plugin/usd)
            list(APPEND ENV_PXR_PLUGINPATH_NAME ${USDARNOLD_ROOT}/lib/usd)
            list(APPEND ENV_PYTHONPATH ${USDARNOLD_ROOT}/lib/python)
        else()
            message(FATAL_ERROR "USDARNOLD_ROOT is not defined")
        endif()
        if(DEFINED ARNOLDUSD_ROOT)
            list(APPEND ${SO_ENV_NAME} ${ARNOLDUSD_ROOT}/lib)
            list(APPEND ${SO_ENV_NAME} ${ARNOLDUSD_ROOT}/bin)
            list(APPEND ENV_PXR_PLUGINPATH_NAME ${ARNOLDUSD_ROOT}/plugin)
            list(APPEND ENV_PXR_PLUGINPATH_NAME ${ARNOLDUSD_ROOT}/lib/usd)
            list(APPEND ENV_PYTHONPATH ${ARNOLDUSD_ROOT}/lib/python)
        else()
            message(FATAL_ERROR "ARNOLDUSD_ROOT is not defined")
        endif()
        if(DEFINED ARNOLD_ROOT)
            list(APPEND ${SO_ENV_NAME} ${ARNOLD_ROOT}/bin)
            list(APPEND ENV_PYTHONPATH ${ARNOLD_ROOT}/python)
        else()
            message(FATAL_ERROR "ARNOLD_ROOT is not defined")
        endif()

        list(APPEND ENV_PXR_PLUGINPATH_NAME ${CMAKE_INSTALL_PREFIX}/plugin/arnold)
    endif()
    if(DCC_BUILD_RENDERMAN_SUPPORT)
        list(APPEND ENV_PXR_PLUGINPATH_NAME ${CMAKE_INSTALL_PREFIX}/plugin/renderman)
    endif()
    if(DEFINED qtadvanceddocking_DIR)
        get_target_property(_ads_lib ads::qtadvanceddocking LOCATION)
        get_filename_component(_ads_lib_dir ${_ads_lib} DIRECTORY)
        list(APPEND ${SO_ENV_NAME} ${_ads_lib_dir})
    else()
        message(FATAL_ERROR "qtadvanceddocking_DIR is not defined")
    endif()
    if(DEFINED PYTHON_EXECUTABLE)
        get_filename_component(_python_dir ${PYTHON_EXECUTABLE} DIRECTORY)
        list(APPEND ${SO_ENV_NAME} ${_python_dir})
    else()
        message(FATAL_ERROR "PYTHON_EXECUTABLE is not defined")
    endif()

    if(DEFINED ZMQ_ROOT)
        list(APPEND ENV_PATH ${ZMQ_ROOT}/bin)
    else()
        message(FATAL_ERROR "ZMQ_ROOT is not defined")
    endif()

    if(DEFINED Shiboken2_DIR)
        list(APPEND ENV_PATH ${Shiboken2_DIR}/../../../bin)
        list(APPEND ENV_PYTHONPATH ${Shiboken2_DIR}/../../../lib/site-packages)
    endif()

    if(DEFINED EMBREE_LOCATION)
        list(APPEND ENV_PATH ${EMBREE_LOCATION}/bin)
    else()
        message(FATAL_ERROR "EMBREE_LOCATION" is not defined)
    endif()

    if(DEFINED LUA_LIBRARY)
        get_filename_component(_lua_library_dir ${LUA_LIBRARY} DIRECTORY)
        get_filename_component(_lua_root_dir ${_lua_library_dir} DIRECTORY)
        list(APPEND ENV_PATH ${_lua_root_dir}/bin)
    else()
        message(FATAL_ERROR "LUA_LIBRARY" is not defined)
    endif()

    if(DCC_MAKE_VSDEBUG_LAUNCHER)
        set(VS_ENVIRONMENT
            "PATH=${ENV_PATH}\;\
PYTHONPATH=${ENV_PYTHONPATH}\;\
PXR_PLUGINPATH_NAME=${ENV_PXR_PLUGINPATH_NAME}"
            CACHE INTERNAL "VS Debugger environment")
        string(REPLACE "\;" "\n" VS_ENVIRONMENT "${VS_ENVIRONMENT}")
    endif()
    if(DCC_MAKE_SHELL_ENV_FILE)
        list(APPEND ENV_PATH ${CMAKE_INSTALL_PREFIX}/bin)
        list(APPEND ENV_PATH ${CMAKE_INSTALL_PREFIX}/plugin/usd)
        set(SHELL_FILE_CONTENT
            "set PATH=${ENV_PATH};%PATH%\n\
set PYTHONPATH=${ENV_PYTHONPATH};%PYTHONPATH%\n\
set PXR_PLUGINPATH_NAME=${ENV_PXR_PLUGINPATH_NAME};%PXR_PLUGINPATH_NAME%\n\
")
        install(CODE "file(WRITE \"${CMAKE_INSTALL_PREFIX}/bin/opendcc_env.cmd\" \"${SHELL_FILE_CONTENT}\")")
    endif()
    if(DCC_MAKE_DOT_ENV_FILE)
        list(APPEND ENV_PATH ${CMAKE_INSTALL_PREFIX}/bin)
        list(APPEND ${SO_ENV_NAME} ${CMAKE_INSTALL_PREFIX}/bin)
        list(APPEND ${SO_ENV_NAME} ${CMAKE_INSTALL_PREFIX}/lib)
        list(APPEND ${SO_ENV_NAME} ${CMAKE_INSTALL_PREFIX}/plugin/usd)
        list(APPEND ${SO_ENV_NAME} ${CMAKE_INSTALL_PREFIX}/plugin/opendcc)
        if(DCC_BUILD_ARNOLD_SUPPORT)
            list(APPEND ${SO_ENV_NAME} ${CMAKE_INSTALL_PREFIX}/plugin/arnold)
        endif()
        set(PATH_SEP ":")
        if(WIN32)
            set(PATH_SEP ";")
        endif()
        # temp
        list(APPEND ENV_LD_LIBRARY_PATH /usr/local/lib)
        list(APPEND ENV_LD_LIBRARY_PATH /usr/local/lib64)
        list(APPEND ENV_PYTHONPATH /usr/local/lib/site-packages)

        list(JOIN ENV_PATH ${PATH_SEP} _ENV_PATH)
        list(JOIN ENV_LD_LIBRARY_PATH ${PATH_SEP} _ENV_LD_LIBRARY_PATH)
        list(JOIN ENV_PYTHONPATH ${PATH_SEP} _ENV_PYTHONPATH)
        list(JOIN ENV_PXR_PLUGINPATH_NAME ${PATH_SEP} _ENV_PXR_PLUGINPATH_NAME)

        set(DOT_ENV_FILE_CONTENT
            "PATH=${_ENV_PATH}\nLD_LIBRARY_PATH=${_ENV_LD_LIBRARY_PATH}\nPYTHONPATH=${_ENV_PYTHONPATH}\nPXR_PLUGINPATH_NAME=${_ENV_PXR_PLUGINPATH_NAME}\nLC_NUMERIC=C\nPYTHONHOME=/usr/local"
        )
        install(CODE "file(WRITE \"${CMAKE_INSTALL_PREFIX}/bin/opendcc.env\" \"${DOT_ENV_FILE_CONTENT}\")")
    endif()
endif()
